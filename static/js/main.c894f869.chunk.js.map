{"version":3,"sources":["styles/fonts.js","marks/CodeMark.js","nodes/CodeNode.js","nodes/NonExecutableCodeNode.js","nodes/SampleOutput.js","nodes/PreNode.js","marks/HotKeys.js","plugins/codePlugin.js","styles/palette.js","components/Buttons.js","components/FormElements.js","toolbars/Popup.js","toolbars/FormatToolBar.js","toolbars/BlocksToolbar.js","serializers/HtmlSerializer.js","toolbars/ExportToolbar.js","Viewer.js","consts.js","nodes/NoteNode.js","toolbars/DataToolbar.js","marks/SubSupMark.js","Nirmaan.js","plugins/listPlugin.js","plugins/notePlugin.js","plugins/alignPlugin.js","plugins/linkPlugin.js","plugins/pasteHtmlPlugin.js","App.js","serviceWorker.js","index.js"],"names":["fontFamilies","CodeMark","props","children","attributes","InlineCode","styled","code","SampMark","Samp","samp","VarMark","Var","CodeNode","output","node","data","get","CodeOutput","Pre","Code","pre","NonExecutableCodeNode","SampleOutput","PreNode","options","type","key","MarkHotKey","palette","Button","button","BlockButton","InlineButton","PrimaryButton","Input","input","Label","textarea","label","div","PopupWrapper","FormatToolbar","editor","FormatToolbarWrapper","className","icon","faBold","onClick","toggleMark","focus","faItalic","faUnderline","faCode","faAlignLeft","alignLeft","faAlignCenter","alignCenter","faAlignRight","alignRight","hasLinks","faUnlink","unwrapLink","modal","trigger","faLink","close","closePopup","InsertLinkPopup","useState","linkUrl","setLinkUrl","linkTitle","setLinkTitle","linkText","setLinkText","isCollapsed","value","selection","Fragment","onChange","e","target","preventDefault","href","title","insertText","moveFocusBackward","length","wrapLink","BlocksToolbar","BlocksToolbarWrapper","isList","isBlockEmpty","insertBlock","unwrapList","setBlocks","faParagraph","faCircle","size","inverse","faChevronCircleRight","moveToEndOfBlock","faHeading","faImage","insertUnorderedList","faListUl","faListOl","insertOrderedList","faStickyNote","insertNote","faDatabase","faTable","insertTable","isSelectionInTable","removeTable","insertRow","removeRow","insertColumn","removeColumn","toggleTableHeaders","InsertImagePopup","imageUrl","setImageUrl","imageTitle","setImageTitle","imageAlt","setImageAlt","image","src","alt","InsertMetadataPopup","block","startBlock","defaultMeta","Object","entries","toJS","map","meta","setMeta","metaInputs","m","i","MetaDataFormInputWrapper","newKey","oldMeta","slice","newValue","CloseButton","faPlus","reduce","obj","setNodeByKey","getHtmlAttributesFromSlate","attrs","o","attr","getHtmlAttributesFromHtmlElement","el","hasAttribute","getAttribute","isIterable","Symbol","iterator","renderChildrenWithLineBreaks","split","array","text","push","renderHeader","renderBody","rules","serialize","object","htmlAttrs","renderTable","deserialize","next","tag","tagName","toLowerCase","nodes","childNodes","childOfPre","classList","contains","class","parentNode","htmlSerializer","Html","ExportToolbar","setViewMode","viewMode","ExportToolbarWrapper","string","document","createElement","body","appendChild","select","execCommand","removeChild","copyToClipboard","viewerContent","alert","html","extra_liners","dangerouslySetInnerHTML","__html","JSON","stringify","toJSON","HtmlEditor","htmlEditorRef","useRef","content","editingMode","setEditingMode","setHtml","current","replace","HtmlEditorTextArea","ref","rows","onBlur","onFocus","readOnly","ViewerWrapper","Viewer","viewerRender","ALIGN","NoteNode","rest","Note","DataToolbar","editorJson","setEditorJson","importHtml","setImportHtml","DataToolbarWrapper","Header","Value","fromJSON","parse","PasteArea","SubMark","Sub","sub","SupMark","Sup","sup","schema","normalize","child","paragraph","Block","create","insertNodeByKey","blocks","isVoid","hr","plugins","SoftBreak","shift","DeepTable","commands","wrapBlock","unwrapBlock","queries","some","isParagraph","endText","renderNode","onKeyDown","event","keyCode","align","style","textAlign","getData","prev","isCode","isCodeBlock","onPaste","getEventTransfer","wrapInline","moveToEnd","unwrapInline","inlines","inline","transfer","console","log","insertFragment","defaultSlateJson","leaves","Nirmaan","state","defaultValue","json","window","localStorage","setItem","id","setState","renderMark","mark","ctrlKey","isFocused","Div","renderEditor","wordCount","getBlocks","memo","b","trim","WordCounter","ToolbarLayout","this","Layout","EditorWrapper","placeholder","Component","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c894f869.chunk.js","sourcesContent":["export const fontFamilies = {\n  MONOSPACE: \"Menlo, Consolas, Courier New\"\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const CodeMark = props => {\n  const { children, attributes } = props;\n  return <InlineCode {...{ attributes }}>{children}</InlineCode>;\n};\n\nconst InlineCode = styled.code`\n  background: #eee;\n\n  &:after {\n    content: \"<code>\";\n    font-family: ${fontFamilies.MONOSPACE};\n    font-size: 5px;\n    margin-left: 2px;\n  }\n`;\n\nexport const SampMark = props => {\n  const { children, attributes } = props;\n  return <Samp {...{ attributes }}>{children}</Samp>;\n};\n\nconst Samp = styled.samp`\n  background: #eee;\n\n  &:after {\n    content: \"<samp>\";\n    font-family: ${fontFamilies.MONOSPACE};\n    font-size: 5px;\n    margin-left: 2px;\n  }\n`;\n\nexport const VarMark = props => {\n  const { children, attributes } = props;\n  return <Var {...{ attributes }}>{children}</Var>;\n};\n\nconst Var = styled.samp`\n  background: #eee;\n\n  &:after {\n    content: \"<var>\";\n    font-family: ${fontFamilies.MONOSPACE};\n    font-size: 5px;\n    margin-left: 2px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const CodeNode = props => {\n  const output = props.node.data.get(\"output\") ? (\n    <CodeOutput>\n      <strong>Output:</strong>\n      <br />\n      {props.node.data.get(\"output\")}\n    </CodeOutput>\n  ) : null;\n\n  return (\n    <div {...props.attributes}>\n      <Pre>\n        <Code>{props.children}</Code>\n      </Pre>\n      {output}\n    </div>\n  );\n};\n\nconst Code = styled.code``;\n\nconst CodeOutput = styled.pre`\n  background: #eee;\n  font-family: ${fontFamilies.MONOSPACE};\n  padding: 10px;\n  z-index: -1;\n`;\n\nconst Pre = styled.pre`\n  background: #eee;\n  position: relative;\n  z-index: -1;\n\n  &:after {\n    content: \"Executable Code\";\n    font-family: ${fontFamilies.MONOSPACE};\n    font-size: 10px;\n    position: absolute;\n    top: 2px;\n    right: 2px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const NonExecutableCodeNode = props => {\n  return (\n    <Pre {...props.attributes}>\n      <Code>{props.children}</Code>\n    </Pre>\n  );\n};\n\nconst Code = styled.code``;\n\nconst Pre = styled.pre`\n  background: #eee;\n  position: relative;\n  z-index: -1;\n\n  &:after {\n    content: \"Non Executable Code\";\n    font-family: ${fontFamilies.MONOSPACE};\n    font-size: 10px;\n    position: absolute;\n    top: 2px;\n    right: 2px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const SampleOutput = props => {\n  return (\n    <Pre {...props.attributes}>\n      <Samp>{props.children}</Samp>\n    </Pre>\n  );\n};\n\nconst Samp = styled.samp``;\n\nconst Pre = styled.pre`\n  background: #eee;\n  position: relative;\n  z-index: -1;\n\n  &:after {\n    content: \"Sample Output\";\n    font-family: ${fontFamilies.MONOSPACE};\n    font-size: 10px;\n    position: absolute;\n    top: 2px;\n    right: 2px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const PreNode = props => {\n  return <Pre {...props.attributes}>{props.children}</Pre>;\n};\n\nconst Pre = styled.pre`\n  background: #eee;\n  position: relative;\n  z-index: -1;\n\n  &:after {\n    content: \"preformatted\";\n    font-family: ${fontFamilies.MONOSPACE};\n    font-size: 10px;\n    position: absolute;\n    top: 2px;\n    right: 2px;\n  }\n`;\n","export const MarkHotKey = options => {\n  const { type, key } = options;\n\n  return {\n    onKeyDown: (event, editor, next) => {\n      if (!event.ctrlKey || event.key !== key) return next();\n      event.preventDefault();\n      editor.toggleMark(type);\n    }\n  };\n};\n","import React from \"react\";\nimport { MarkHotKey } from \"../marks/HotKeys\";\nimport { CodeNode } from \"../nodes/CodeNode\";\nimport { NonExecutableCodeNode } from \"../nodes/NonExecutableCodeNode\";\nimport { SampleOutput } from \"../nodes/SampleOutput\";\nimport { getEventTransfer } from \"slate-react\";\nimport { PreNode } from \"../nodes/PreNode\";\n\nexport const codeMarkPlugin = MarkHotKey({\n  type: \"code\",\n  key: \"`\"\n});\n\nexport const isCodeBlock = block => {\n  return (\n    block.type === \"code\" ||\n    block.type === \"nonexecutable-code\" ||\n    block.type === \"sample-output\"\n  );\n};\n\nexport const codeNodePlugin = options => {\n  return {\n    queries: {\n      isCode: editor => {\n        return editor.value.blocks.some(block => isCodeBlock(block));\n      }\n    },\n    onPaste: (event, editor, next) => {\n      const { text } = getEventTransfer(event);\n      const isCode = editor.isCode();\n\n      if (!isCode) {\n        return next();\n      }\n\n      editor.insertText(text.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\"));\n    },\n    renderNode: (props, editor, next) => {\n      switch (props.node.type) {\n        case \"code\":\n          return <CodeNode {...props} />;\n        case \"nonexecutable-code\":\n          return <NonExecutableCodeNode {...props} />;\n        case \"sample-output\":\n          return <SampleOutput {...props} />;\n        case \"pre\":\n          return <PreNode {...props} />;\n        default:\n          return next();\n      }\n    }\n  };\n};\n","export const palette = {\n  GREY_BORDER_LIGHT: \"#eee\",\n  TEAL: \"#008080\",\n  WHITE: \"#F0F0F0\"\n};\n","import styled from \"styled-components\";\nimport { palette } from \"../styles/palette\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const Button = styled.button`\n  cursor: pointer;\n  outline: none;\n`;\n\nexport const BlockButton = styled(Button)`\n  border: 1px solid #ccc;\n  padding: 7px;\n  margin: 3px;\n  cursor: pointer;\n  outline: none;\n  font-size: 13px;\n  color: #777;\n`;\n\nexport const InlineButton = styled(Button)`\n  font-size: 13px;\n`;\n\nexport const PrimaryButton = styled.button`\n  background: ${palette.TEAL};\n  color: ${palette.WHITE};\n  height: 30px;\n  margin: 0 10px;\n  font-size: 16px;\n  font-family: ${fontFamilies.MONOSPACE};\n`;\n","import { palette } from \"../styles/palette\";\nimport styled from \"styled-components\";\nimport { fontFamilies } from \"../styles/fonts\";\n\nexport const Input = styled.input`\n  border: 1px solid ${palette.GREY_BORDER_LIGHT};\n  height: 29px;\n  padding: 0 10px;\n  font-family: ${fontFamilies.MONOSPACE};\n  outline: none;\n  width: 500px;\n  max-width: 90%;\n  font-size: 18px;\n`;\n\nexport const Textarea = styled.textarea`\n  border: 1px solid ${palette.GREY_BORDER_LIGHT};\n  height: 300px;\n  padding: 0 10px;\n  font-family: ${fontFamilies.MONOSPACE};\n  outline: none;\n  width: 500px;\n  font-size: 18px;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  font-weight: bold;\n  margin-top: 20px;\n`;\n\nexport const InlineForm = styled.div`\n  display: grid;\n  grid-template-columns: auto auto;\n`;\n","import styled from \"styled-components\";\n\nexport const PopupWrapper = styled.div`\n  padding: 30px 50px;\n  z-index: 100000000;\n`;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBold,\n  faItalic,\n  faCode,\n  faAlignCenter,\n  faAlignLeft,\n  faAlignRight,\n  faLink,\n  faUnlink,\n  faUnderline\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { InlineButton, PrimaryButton } from \"../components/Buttons\";\nimport { Input, Label } from \"../components/FormElements\";\nimport Popup from \"reactjs-popup\";\nimport { PopupWrapper } from \"./Popup\";\n\nexport const FormatToolbar = props => {\n  const { editor } = props;\n  return (\n    <FormatToolbarWrapper>\n      <InlineButton className=\"tooltip-icon-button\">\n        <FontAwesomeIcon\n          icon={faBold}\n          onClick={() => {\n            editor.toggleMark(\"bold\");\n            editor.focus();\n          }}\n        />\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <FontAwesomeIcon\n          icon={faItalic}\n          onClick={() => {\n            editor.toggleMark(\"italic\");\n            editor.focus();\n          }}\n        />\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <FontAwesomeIcon\n          icon={faUnderline}\n          onClick={() => {\n            editor.toggleMark(\"underline\");\n            editor.focus();\n          }}\n        />\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <FontAwesomeIcon\n          icon={faCode}\n          onClick={() => {\n            editor.toggleMark(\"code\");\n            editor.focus();\n          }}\n        />\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <div\n          onClick={() => {\n            editor.toggleMark(\"samp\");\n            editor.focus();\n          }}\n        >\n          samp\n        </div>\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <div\n          onClick={() => {\n            editor.toggleMark(\"var\");\n            editor.focus();\n          }}\n        >\n          var\n        </div>\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <FontAwesomeIcon\n          icon={faAlignLeft}\n          onClick={() => {\n            editor.alignLeft();\n            editor.focus();\n          }}\n        />\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <FontAwesomeIcon\n          icon={faAlignCenter}\n          onClick={() => {\n            editor.alignCenter();\n            editor.focus();\n          }}\n        />\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <FontAwesomeIcon\n          icon={faAlignRight}\n          onClick={() => {\n            editor.alignRight();\n            editor.focus();\n          }}\n        />\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <div\n          onClick={() => {\n            editor.toggleMark(\"sup\");\n            editor.focus();\n          }}\n        >\n          sup\n        </div>\n      </InlineButton>\n      <InlineButton className=\"tooltip-icon-button\">\n        <div\n          onClick={() => {\n            editor.toggleMark(\"sub\");\n            editor.focus();\n          }}\n        >\n          sub\n        </div>\n      </InlineButton>\n      {editor &&\n        (editor.hasLinks() ? (\n          <InlineButton className=\"tooltip-icon-button\">\n            <FontAwesomeIcon\n              icon={faUnlink}\n              onClick={() => {\n                editor.unwrapLink();\n              }}\n            />\n          </InlineButton>\n        ) : (\n          <Popup\n            modal\n            trigger={\n              <InlineButton className=\"tooltip-icon-button\">\n                <FontAwesomeIcon icon={faLink} />\n              </InlineButton>\n            }\n          >\n            {close => <InsertLinkPopup {...props} closePopup={close} />}\n          </Popup>\n        ))}\n    </FormatToolbarWrapper>\n  );\n};\n\nconst InsertLinkPopup = props => {\n  const { editor, closePopup } = props;\n  const [linkUrl, setLinkUrl] = useState(\"\");\n  const [linkTitle, setLinkTitle] = useState(\"\");\n  const [linkText, setLinkText] = useState(\"\");\n\n  const isCollapsed = editor.value.selection.isCollapsed;\n\n  return (\n    <PopupWrapper>\n      {isCollapsed && (\n        <React.Fragment>\n          <Label>Text</Label>\n          <Input\n            type=\"text\"\n            value={linkText}\n            onChange={e => setLinkText(e.target.value)}\n          />\n        </React.Fragment>\n      )}\n      <Label>Link</Label>\n      <Input\n        type=\"text\"\n        value={linkUrl}\n        onChange={e => setLinkUrl(e.target.value)}\n      />\n      <Label>Title</Label>\n      <Input\n        type=\"text\"\n        value={linkTitle}\n        onChange={e => setLinkTitle(e.target.value)}\n      />\n      <PrimaryButton\n        onClick={e => {\n          e.preventDefault();\n          const href = linkUrl;\n          const title = linkTitle;\n\n          if (isCollapsed) {\n            editor\n              .insertText(linkText)\n              .moveFocusBackward(linkText.length)\n              .wrapLink({ href, title })\n              .focus();\n          } else {\n            editor.wrapLink({ href, title });\n          }\n          closePopup();\n        }}\n      >\n        Insert\n      </PrimaryButton>\n    </PopupWrapper>\n  );\n};\n\nconst FormatToolbarWrapper = styled.div`\n  display: flex;\n  border-bottom: solid 1.7px rgba(199, 198, 255, 0.15);\n  padding: 10px 0;\n  background: white;\n`;\n","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faHeading,\n  faCode,\n  faImage,\n  faParagraph,\n  faTable,\n  faListUl,\n  faListOl,\n  faCircle,\n  faChevronCircleRight,\n  faStickyNote,\n  faDatabase,\n  faPlus,\n  faCross\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { BlockButton, PrimaryButton, Button } from \"../components/Buttons\";\nimport styled from \"styled-components\";\nimport Popup from \"reactjs-popup\";\nimport { Input, InlineForm, Textarea, Label } from \"../components/FormElements\";\nimport { PopupWrapper } from \"./Popup\";\n\nexport const BlocksToolbar = props => {\n  const { editor, onChange } = props;\n\n  return (\n    <BlocksToolbarWrapper>\n      <BlockButton\n        onClick={() => {\n          if (editor.isList() && !editor.isBlockEmpty()) {\n            editor.insertBlock(\"paragraph\").unwrapList();\n          } else {\n            editor.setBlocks(\"paragraph\").unwrapList();\n          }\n          editor.focus();\n        }}\n      >\n        <FontAwesomeIcon icon={faParagraph} />\n      </BlockButton>\n      <BlockButton\n        onClick={e => {\n          e.preventDefault();\n          editor.insertText(\"\\n\");\n          editor.focus();\n        }}\n      >\n        &lt;br&gt;\n      </BlockButton>\n      <BlockButton\n        onClick={e => {\n          e.preventDefault();\n          editor.insertBlock(\"hr\");\n        }}\n      >\n        __\n      </BlockButton>\n      <BlockButton\n        onClick={() => {\n          editor.setBlocks(\"code\");\n          editor.focus();\n        }}\n      >\n        <FontAwesomeIcon icon={faCode} />\n      </BlockButton>\n      <BlockButton\n        onClick={() => {\n          editor.setBlocks(\"nonexecutable-code\");\n          editor.focus();\n        }}\n      >\n        <span className=\"fa-layers fa-fw\">\n          <FontAwesomeIcon icon={faCircle} size=\"lg\" />\n          <FontAwesomeIcon icon={faCode} size=\"xs\" inverse />\n        </span>\n      </BlockButton>\n      <BlockButton\n        onClick={() => {\n          editor.setBlocks(\"sample-output\");\n          editor.focus();\n        }}\n      >\n        <FontAwesomeIcon icon={faChevronCircleRight} />\n      </BlockButton>\n      <BlockButton\n        onClick={() => {\n          editor.setBlocks(\"heading-1\");\n          !editor.isBlockEmpty() &&\n            editor\n              .moveToEndOfBlock()\n              .insertBlock(\"paragraph\")\n              .unwrapList();\n          editor.focus();\n        }}\n      >\n        <FontAwesomeIcon icon={faHeading} />\n      </BlockButton>\n      <BlockButton\n        onClick={() => {\n          editor.setBlocks(\"heading-2\");\n          !editor.isBlockEmpty() &&\n            editor\n              .moveToEndOfBlock()\n              .insertBlock(\"paragraph\")\n              .unwrapList();\n          editor.focus();\n        }}\n      >\n        <FontAwesomeIcon icon={faHeading} size=\"sm\" />\n      </BlockButton>\n      <BlockButton\n        onClick={() => {\n          editor.setBlocks(\"heading-3\");\n          !editor.isBlockEmpty() &&\n            editor\n              .moveToEndOfBlock()\n              .insertBlock(\"paragraph\")\n              .unwrapList();\n          editor.focus();\n        }}\n      >\n        <FontAwesomeIcon icon={faHeading} size=\"xs\" />\n      </BlockButton>\n      <Popup\n        modal\n        trigger={\n          <BlockButton className=\"tooltip-icon-button\">\n            <FontAwesomeIcon icon={faImage} />\n          </BlockButton>\n        }\n      >\n        {close => <InsertImagePopup {...props} closePopup={close} />}\n      </Popup>\n\n      <BlockButton\n        onClick={e => {\n          e.preventDefault();\n          if (!editor.isList()) {\n            onChange(editor.insertUnorderedList());\n          } else {\n            onChange(editor.unwrapList());\n          }\n        }}\n      >\n        <FontAwesomeIcon icon={faListUl} />\n      </BlockButton>\n      <BlockButton>\n        <FontAwesomeIcon\n          icon={faListOl}\n          onClick={e => {\n            e.preventDefault();\n            if (!editor.isList()) {\n              onChange(editor.insertOrderedList());\n            } else {\n              onChange(editor.unwrapList());\n            }\n          }}\n        />\n      </BlockButton>\n      <BlockButton>\n        <div\n          onClick={e => {\n            e.preventDefault();\n            editor.setBlocks(\"pre\");\n          }}\n        >\n          pre\n        </div>\n      </BlockButton>\n      <BlockButton>\n        <FontAwesomeIcon\n          icon={faStickyNote}\n          onClick={e => {\n            e.preventDefault();\n            onChange(editor.insertNote());\n          }}\n        />\n      </BlockButton>\n      <Popup\n        trigger={\n          <BlockButton>\n            <FontAwesomeIcon\n              icon={faDatabase}\n              onClick={e => {\n                e.preventDefault();\n              }}\n            />\n          </BlockButton>\n        }\n        modal\n      >\n        {close => <InsertMetadataPopup {...props} closePopup={close} />}\n      </Popup>\n\n      <BlockButton>\n        <FontAwesomeIcon\n          icon={faTable}\n          onClick={e => {\n            e.preventDefault();\n            onChange(editor.insertTable().unwrapList());\n          }}\n        />\n      </BlockButton>\n      {editor && editor.isSelectionInTable() && (\n        <React.Fragment>\n          <button onClick={() => onChange(editor.removeTable())}>\n            Delete Table\n          </button>\n          <button onClick={() => onChange(editor.insertRow())}>\n            Insert Row\n          </button>\n          <button onClick={() => onChange(editor.removeRow())}>\n            Delete Row\n          </button>\n          <button onClick={() => onChange(editor.insertColumn())}>\n            Insert Column\n          </button>\n          <button onClick={() => onChange(editor.removeColumn())}>\n            Delete Column\n          </button>\n          <button onClick={() => onChange(editor.toggleTableHeaders())}>\n            Toggle header\n          </button>\n        </React.Fragment>\n      )}\n    </BlocksToolbarWrapper>\n  );\n};\n\nconst BlocksToolbarWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  left: 0;\n  top: 4%;\n`;\n\nconst InsertImagePopup = props => {\n  const { editor, closePopup } = props;\n  const [imageUrl, setImageUrl] = useState(\"https://placekitten.com/200/300\");\n  const [imageTitle, setImageTitle] = useState(\"\");\n  const [imageAlt, setImageAlt] = useState(\"\");\n\n  return (\n    <PopupWrapper>\n      <React.Fragment>\n        <Label>Url</Label>\n        <Input\n          type=\"text\"\n          value={imageUrl}\n          onChange={e => setImageUrl(e.target.value)}\n        />\n        <Label>Alt</Label>\n        <Input\n          type=\"text\"\n          value={imageAlt}\n          onChange={e => setImageAlt(e.target.value)}\n        />\n        <Label>Title</Label>\n        <Input\n          type=\"text\"\n          value={imageTitle}\n          onChange={e => setImageTitle(e.target.value)}\n        />\n        <PrimaryButton\n          onClick={e => {\n            e.preventDefault();\n            const image = {\n              type: \"image\",\n              data: {\n                src: imageUrl,\n                title: imageTitle,\n                alt: imageAlt\n              }\n            };\n            editor.isBlockEmpty()\n              ? editor.setBlocks(image)\n              : editor.insertBlock(image);\n            editor.insertBlock(\"paragraph\");\n            editor.focus();\n            closePopup();\n          }}\n        >\n          Insert\n        </PrimaryButton>\n      </React.Fragment>\n    </PopupWrapper>\n  );\n};\n\nconst InsertMetadataPopup = props => {\n  const { editor, closePopup } = props;\n\n  const block = editor.value.startBlock;\n\n  let defaultMeta = Object.entries(block.data.toJS()).map(([key, value]) => {\n    return {\n      key,\n      value\n    };\n  });\n\n  if (defaultMeta.length === 0) defaultMeta = [{ key: \"\", value: \"\" }];\n\n  const [meta, setMeta] = useState(defaultMeta);\n\n  const metaInputs = meta.map((m, i) => {\n    return (\n      <MetaDataFormInputWrapper key={i}>\n        <div>\n          <Label>Key</Label>\n          <Input\n            type=\"text\"\n            value={m.key}\n            onChange={e => {\n              const newKey = e.target.value;\n              setMeta(oldMeta => {\n                return [\n                  ...oldMeta.slice(0, i),\n                  {\n                    key: newKey,\n                    value: oldMeta[i].value\n                  },\n                  ...oldMeta.slice(i + 1)\n                ];\n              });\n            }}\n          />\n        </div>\n        <div>\n          <Label>Value</Label>\n          <Input\n            value={m.value}\n            onChange={e => {\n              const newValue = e.target.value;\n              setMeta(oldMeta => {\n                return [\n                  ...oldMeta.slice(0, i),\n                  {\n                    key: oldMeta[i].key,\n                    value: newValue\n                  },\n                  ...oldMeta.slice(i + 1)\n                ];\n              });\n            }}\n          />\n        </div>\n        <div>\n          <CloseButton\n            onClick={() => {\n              setMeta(oldMeta => {\n                return [...oldMeta.slice(0, i), ...oldMeta.slice(i + 1)];\n              });\n            }}\n          >\n            ×\n          </CloseButton>\n        </div>\n      </MetaDataFormInputWrapper>\n    );\n  });\n\n  return (\n    <PopupWrapper>\n      <h2>Update metadata</h2>\n      {metaInputs}\n      <Button\n        onClick={() => setMeta(meta => [...meta, { key: \"\", value: \"\" }])}\n      >\n        <FontAwesomeIcon icon={faPlus} />\n      </Button>\n      <PrimaryButton\n        onClick={e => {\n          e.preventDefault();\n          const data = meta.reduce((obj, m) => {\n            obj[m.key] = m.value;\n            return obj;\n          }, {});\n\n          editor.setNodeByKey(block.key, { data });\n\n          editor.focus();\n          closePopup();\n        }}\n      >\n        Update metadata\n      </PrimaryButton>\n    </PopupWrapper>\n  );\n};\n\nconst CloseButton = styled.div`\n  line-height: 100px;\n  font-size: 25px;\n  padding-left: 10px;\n  padding-right: 10px;\n  font-weight: thin;\n  cursor: pointer;\n`;\n\nconst MetaDataFormInputWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 45% 45% 10%;\n  width: 100%;\n`;\n","import React from \"react\";\nimport Html from \"slate-html-serializer\";\n\nconst attributes = [\n  \"id\",\n  \"class\",\n  \"name\",\n  \"src\",\n  \"alt\",\n  \"href\",\n  \"title\",\n  \"width\",\n  \"height\"\n];\n\nconst getHtmlAttributesFromSlate = obj => {\n  if (!obj.data) return {};\n  const attrs = obj.data.toJS();\n\n  const htmlAttrs = attributes.reduce((o, attr) => {\n    if (attrs[attr]) {\n      o[attr] = attrs[attr];\n    }\n    return o;\n  }, {});\n  return htmlAttrs;\n};\n\nconst getHtmlAttributesFromHtmlElement = el => {\n  const data = attributes.reduce((o, attr) => {\n    if (el.hasAttribute && el.hasAttribute(attr)) {\n      o[attr] = el.getAttribute(attr);\n    }\n    return o;\n  }, {});\n  return data;\n};\n\nconst isIterable = obj => {\n  if (obj == null) {\n    return false;\n  }\n  return typeof obj[Symbol.iterator] === \"function\";\n};\n\nconst renderChildrenWithLineBreaks = obj => {\n  if (isIterable(obj) && typeof obj !== \"string\") {\n    return obj.map(o => renderChildrenWithLineBreaks(o));\n  }\n  if (typeof obj === \"string\") {\n    return obj.split(\"\\n\").reduce((array, text, i) => {\n      if (i !== 0) array.push(<br key={i} />);\n      array.push(text);\n      return array;\n    }, []);\n  }\n  return obj;\n};\n\nconst renderHeader = obj => {\n  if (isIterable(obj)) {\n    return obj.map(o => renderHeader(o));\n  }\n  if (obj.type === \"tr\") {\n    return (\n      <thead>\n        <tr>{renderHeader(obj.props.children)}</tr>\n      </thead>\n    );\n  }\n\n  if (obj.type === \"td\") {\n    return <th>{obj.props.children}</th>;\n  }\n  return obj;\n};\n\nconst renderBody = obj => {\n  return <tbody>{obj}</tbody>;\n};\n\nconst renderTable = obj => {\n  return [renderHeader(obj.slice(0, 1)), renderBody(obj.slice(1))];\n};\n\nconst rules = [\n  {\n    serialize: (obj, children) => {\n      if (obj.object === \"block\") {\n        const htmlAttrs = getHtmlAttributesFromSlate(obj);\n\n        switch (obj.type) {\n          case \"code\":\n            return (\n              <pre {...htmlAttrs} className=\"exec\">\n                <code>{children}</code>\n              </pre>\n            );\n          case \"nonexecutable-code\":\n            return (\n              <pre {...htmlAttrs}>\n                <code>{children}</code>\n              </pre>\n            );\n          case \"sample-output\":\n            return (\n              <pre {...htmlAttrs}>\n                <samp>{children}</samp>\n              </pre>\n            );\n          case \"image\":\n            return <img {...htmlAttrs} />;\n          case \"paragraph\":\n            return (\n              <p {...htmlAttrs}>{renderChildrenWithLineBreaks(children)}</p>\n            );\n          case \"heading-1\":\n            return <h1 {...htmlAttrs}>{children}</h1>;\n          case \"heading-2\":\n            return <h2 {...htmlAttrs}>{children}</h2>;\n          case \"heading-3\":\n            return <h3 {...htmlAttrs}>{children}</h3>;\n          case \"ul-list\":\n            return <ul {...htmlAttrs}>{children}</ul>;\n          case \"ol-list\":\n            return <ol {...htmlAttrs}>{children}</ol>;\n          case \"list-item\":\n            return (\n              <li {...htmlAttrs}>{renderChildrenWithLineBreaks(children)}</li>\n            );\n          case \"table\":\n            return <table {...htmlAttrs}>{renderTable(children)}</table>;\n          case \"table_header\":\n            return <thead {...htmlAttrs}>{children}</thead>;\n          case \"table_body\":\n            return <tbody {...htmlAttrs}>{children}</tbody>;\n          case \"table_row\":\n            return <tr {...htmlAttrs}>{children}</tr>;\n          case \"table_cell\":\n            return <td {...htmlAttrs}>{children}</td>;\n          case \"table_header_cell\":\n            return <th {...htmlAttrs}>{children}</th>;\n          case \"pre\":\n            return <pre {...htmlAttrs}>{children}</pre>;\n          case \"hr\":\n            return <hr {...htmlAttrs} />;\n          case \"div\":\n            return <div {...htmlAttrs}>{children}</div>;\n          default:\n            return <p {...htmlAttrs}>{children}</p>;\n        }\n      }\n    },\n    deserialize: (el, next) => {\n      const tag = el.tagName.toLowerCase();\n      const data = getHtmlAttributesFromHtmlElement(el);\n\n      if (tag === \"div\") {\n        return {\n          object: \"block\",\n          type: \"div\",\n          nodes: next(el.childNodes),\n          data\n        };\n      }\n      if (tag === \"p\") {\n        return {\n          object: \"block\",\n          type: \"paragraph\",\n          nodes: next(el.childNodes),\n          data\n        };\n      }\n      if (tag === \"h1\") {\n        return {\n          object: \"block\",\n          type: \"heading-1\",\n          nodes: next(el.childNodes),\n          data\n        };\n      }\n      if (tag === \"h2\") {\n        return {\n          object: \"block\",\n          type: \"heading-2\",\n          nodes: next(el.childNodes),\n          data\n        };\n      }\n      if (tag === \"h3\") {\n        return {\n          object: \"block\",\n          type: \"heading-3\",\n          nodes: next(el.childNodes),\n          data\n        };\n      }\n      if (tag === \"ul\") {\n        return {\n          object: \"block\",\n          type: \"ul-list\",\n          nodes: next(el.childNodes),\n          data\n        };\n      }\n      if (tag === \"ol\") {\n        return {\n          object: \"block\",\n          type: \"ol-list\",\n          nodes: next(el.childNodes),\n          data\n        };\n      }\n      if (tag === \"li\") {\n        return {\n          object: \"block\",\n          type: \"list-item\",\n          nodes: next(el.childNodes),\n          data\n        };\n      }\n      if (tag === \"table\") {\n        return {\n          object: \"block\",\n          type: \"table\",\n          nodes: next(el.childNodes),\n          data\n        };\n      }\n      if (tag === \"thead\") {\n        return;\n      }\n      if (tag === \"tbody\") {\n        return;\n      }\n      if (tag === \"tr\") {\n        return {\n          object: \"block\",\n          type: \"table_row\",\n          nodes: next(el.childNodes),\n          data\n        };\n      }\n      if (tag === \"td\") {\n        return {\n          object: \"block\",\n          type: \"table_cell\",\n          nodes: next(el.childNodes),\n          data\n        };\n      }\n      if (tag === \"th\") {\n        return {\n          object: \"block\",\n          type: \"table_cell\",\n          nodes: next(el.childNodes),\n          data\n        };\n      }\n      if (tag === \"hr\") {\n        return {\n          object: \"block\",\n          type: \"hr\",\n          data\n        };\n      }\n      if (tag === \"pre\") {\n        const childOfPre = el.childNodes[0];\n        if (\n          childOfPre &&\n          childOfPre.tagName &&\n          childOfPre.tagName.toLowerCase() === \"code\" &&\n          el.classList.contains(\"exec\")\n        ) {\n          delete data.class;\n          return {\n            object: \"block\",\n            type: \"code\",\n            nodes: next(childOfPre.childNodes),\n            data\n          };\n        }\n\n        if (\n          childOfPre &&\n          childOfPre.tagName &&\n          childOfPre.tagName.toLowerCase() === \"code\" &&\n          !el.classList.contains(\"exec\")\n        ) {\n          return {\n            object: \"block\",\n            type: \"nonexecutable-code\",\n            nodes: next(childOfPre.childNodes),\n            data\n          };\n        }\n\n        if (\n          childOfPre &&\n          childOfPre.tagName &&\n          childOfPre.tagName.toLowerCase() === \"samp\"\n        ) {\n          return {\n            object: \"block\",\n            type: \"sample-output\",\n            nodes: next(childOfPre.childNodes),\n            data\n          };\n        }\n        return {\n          object: \"block\",\n          type: \"pre\",\n          nodes: next(el.childNodes),\n          data\n        };\n      }\n\n      if (tag === \"img\") {\n        return {\n          object: \"block\",\n          type: \"image\",\n          nodes: next(el.childNodes),\n          data\n        };\n      }\n    }\n  },\n  {\n    serialize: (obj, children) => {\n      if (obj.object === \"mark\") {\n        switch (obj.type) {\n          case \"bold\":\n            return <strong>{children}</strong>;\n          case \"underline\":\n            return <u>{children}</u>;\n          case \"italic\":\n            return <em>{children}</em>;\n          case \"code\":\n            return <code>{children}</code>;\n          case \"var\":\n            return <var>{children}</var>;\n          case \"samp\":\n            return <samp>{children}</samp>;\n          case \"sup\":\n            return <sup>{children}</sup>;\n          case \"sub\":\n            return <sub>{children}</sub>;\n          default:\n            return;\n        }\n      }\n    },\n    deserialize: (el, next) => {\n      const tag = el.tagName.toLowerCase();\n      if (tag === \"strong\") {\n        return {\n          object: \"mark\",\n          type: \"bold\",\n          nodes: next(el.childNodes)\n        };\n      }\n      if (tag === \"u\") {\n        return {\n          object: \"mark\",\n          type: \"underline\",\n          nodes: next(el.childNodes)\n        };\n      }\n      if (tag === \"em\") {\n        return {\n          object: \"mark\",\n          type: \"italic\",\n          nodes: next(el.childNodes)\n        };\n      }\n      if (tag === \"var\") {\n        return {\n          object: \"mark\",\n          type: \"var\",\n          nodes: next(el.childNodes)\n        };\n      }\n      if (tag === \"sub\") {\n        return {\n          object: \"mark\",\n          type: \"sub\",\n          nodes: next(el.childNodes)\n        };\n      }\n      if (tag === \"sup\") {\n        return {\n          object: \"mark\",\n          type: \"sup\",\n          nodes: next(el.childNodes)\n        };\n      }\n      if (tag === \"code\" && el.parentNode.tagName.toLowerCase() !== \"pre\") {\n        return {\n          object: \"mark\",\n          type: \"code\",\n          nodes: next(el.childNodes)\n        };\n      }\n      if (tag === \"samp\" && el.parentNode.tagName.toLowerCase() !== \"pre\") {\n        return {\n          object: \"mark\",\n          type: \"samp\",\n          nodes: next(el.childNodes)\n        };\n      }\n    }\n  },\n  {\n    serialize: (obj, children) => {\n      const htmlAttrs = getHtmlAttributesFromSlate(obj);\n      if (obj.object === \"inline\") {\n        switch (obj.type) {\n          case \"link\":\n            return <a {...htmlAttrs}>{children}</a>;\n          default:\n            return;\n        }\n      }\n    },\n    // Special case for links, to grab their href.\n    deserialize: (el, next) => {\n      const data = getHtmlAttributesFromHtmlElement(el);\n      if (el.tagName.toLowerCase() === \"a\") {\n        return {\n          object: \"inline\",\n          type: \"link\",\n          nodes: next(el.childNodes),\n          data\n        };\n      }\n    }\n  },\n  {\n    serialize(obj, children) {\n      if (obj.object === \"string\") {\n        return children;\n      }\n    }\n  }\n];\n\n// Create a new serializer instance with our `rules` from above.\nconst htmlSerializer = new Html({ rules });\n\nexport default htmlSerializer;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { InlineButton } from \"../components/Buttons\";\nimport { viewerContent } from \"../Viewer\";\n\nconst copyToClipboard = string => {\n  const el = document.createElement(\"textarea\");\n  el.value = string;\n  document.body.appendChild(el);\n  el.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(el);\n};\n\nexport const ExportToolbar = props => {\n  const { editor, setViewMode, viewMode } = props;\n  return (\n    <ExportToolbarWrapper>\n      <InlineButton onClick={() => setViewMode(\"OUTPUT\")}>Output</InlineButton>\n      <InlineButton onClick={() => setViewMode(\"HTML\")}>HTML</InlineButton>\n      <InlineButton\n        onClick={() => {\n          setViewMode(\"JSON\");\n        }}\n      >\n        JSON\n      </InlineButton>\n      <InlineButton\n        onClick={() => {\n          const content = viewerContent(editor, viewMode);\n          copyToClipboard(content);\n          alert(`Copied ${viewMode} to clipboard!`);\n        }}\n      >\n        Copy to Clipboard\n      </InlineButton>\n    </ExportToolbarWrapper>\n  );\n};\n\nconst ExportToolbarWrapper = styled.div`\n  top: 0;\n  right: 0;\n`;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport htmlSerializer from \"./serializers/HtmlSerializer\";\nimport { ExportToolbar } from \"./toolbars/ExportToolbar\";\nimport { html } from \"js-beautify\";\nimport { fontFamilies } from \"./styles/fonts\";\nimport { Value, Block } from \"slate\";\nimport { defaultSlateJson } from \"./Nirmaan\";\n\nexport const viewerContent = (editor, viewMode) => {\n  if (!editor) {\n    return \"\";\n  }\n\n  if (viewMode === \"HTML\") {\n    const prettyHtml = html(htmlSerializer.serialize(editor.value), {\n      extra_liners: [\n        \"p\",\n        \"img\",\n        \"h1\",\n        \"h2\",\n        \"h3\",\n        \"pre\",\n        \"ul\",\n        \"li\",\n        \"table\",\n        \"hr\",\n        \"div\"\n      ]\n    });\n    return prettyHtml;\n  } else if (viewMode === \"OUTPUT\") {\n    return (\n      <div\n        dangerouslySetInnerHTML={{\n          __html: htmlSerializer.serialize(editor.value)\n        }}\n      />\n    );\n  } else {\n    return JSON.stringify(editor.value.toJSON(), null, 4);\n  }\n};\n\nexport const viewerRender = (editor, viewMode) => {\n  if (viewMode === \"OUTPUT\") {\n    return viewerContent(editor, viewMode);\n  } else {\n    return (\n      <HtmlEditor content={viewerContent(editor, viewMode)} editor={editor} />\n    );\n  }\n};\n\nconst HtmlEditor = props => {\n  const htmlEditorRef = useRef(null);\n  const { content, editor } = props;\n\n  const [editingMode, setEditingMode] = useState(false);\n  const [html, setHtml] = useState(\"\");\n\n  return (\n    <div>\n      {!editingMode && (\n        <button\n          onClick={() => {\n            setEditingMode(true);\n            setHtml(content);\n            htmlEditorRef.current.focus();\n          }}\n        >\n          Edit HTML\n        </button>\n      )}\n      {editingMode && (\n        <button\n          onClick={() => {\n            editor.onChange({\n              value: htmlSerializer.deserialize(html.replace(/>\\s+</g, \"><\"))\n            });\n            setEditingMode(false);\n          }}\n        >\n          Update\n        </button>\n      )}\n      <HtmlEditorTextArea\n        ref={htmlEditorRef}\n        value={editingMode ? html : content}\n        rows={100}\n        onChange={e => setHtml(e.target.value)}\n        onBlur={e => {\n          editor.onChange({\n            value: htmlSerializer.deserialize(\n              e.target.value.replace(/>\\s+</g, \"><\")\n            )\n          });\n          setEditingMode(false);\n        }}\n        onFocus={e => {\n          setEditingMode(true);\n          setHtml(content);\n        }}\n        readOnly={!editingMode}\n      />\n    </div>\n  );\n};\n\nexport const JsonViewer = props => {\n  const json = props.json || defaultSlateJson;\n  const value = Value.fromJSON(json);\n  const html = htmlSerializer.serialize(value);\n\n  return (\n    <div\n      style={{\n        minHeight: \"1.5em\"\n      }}\n      dangerouslySetInnerHTML={{\n        __html: html\n      }}\n    />\n  );\n};\n\nconst Viewer = props => {\n  const { editor } = props;\n\n  const [viewMode, setViewMode] = useState(\"OUTPUT\");\n  let content = viewerRender(editor, viewMode);\n\n  return (\n    <ViewerWrapper>\n      <ExportToolbar\n        editor={editor}\n        viewMode={viewMode}\n        setViewMode={setViewMode}\n      />\n      {content}\n    </ViewerWrapper>\n  );\n};\n\nconst ViewerWrapper = styled.div`\n  padding: 10px;\n\n  max-height: 100vh;\n  overflow: scroll;\n`;\n\nconst HtmlEditorTextArea = styled.textarea`\n  width: 100%;\n  outline: none;\n  border: none;\n  font-size: 0.9rem;\n  font-family: ${fontFamilies.MONOSPACE};\n`;\n\nexport default Viewer;\n","export const ALIGN = {\n  LEFT: \"left\",\n  CENTER: \"center\",\n  RIGHT: \"right\"\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const NoteNode = props => {\n  const { attributes, children, ...rest } = props;\n  return (\n    <Note {...attributes} {...rest}>\n      {children}\n    </Note>\n  );\n};\n\nconst Note = styled.div`\n  padding: 20px;\n  border: 1px solid #777;\n`;\n","import React, { useState } from \"react\";\nimport { Value } from \"slate\";\nimport styled from \"styled-components\";\nimport Popup from \"reactjs-popup\";\nimport { fontFamilies } from \"../styles/fonts\";\nimport { PrimaryButton } from \"../components/Buttons\";\nimport htmlSerializer from \"../serializers/HtmlSerializer\";\n\nexport const DataToolbar = props => {\n  const { onChange } = props;\n  const [editorJson, setEditorJson] = useState({});\n  const [importHtml, setImportHtml] = useState(\"<p></p>\");\n  return (\n    <DataToolbarWrapper>\n      <Popup modal trigger={<button>Import JSON</button>}>\n        {close => {\n          return (\n            <React.Fragment>\n              <Header>\n                <h3>Paste JSON here</h3>\n                <PrimaryButton\n                  onClick={() => {\n                    onChange({\n                      value: Value.fromJSON(JSON.parse(editorJson))\n                    });\n                    close();\n                  }}\n                >\n                  Import\n                </PrimaryButton>\n              </Header>\n\n              <PasteArea\n                rows={20}\n                onChange={e => setEditorJson(e.target.value)}\n              />\n            </React.Fragment>\n          );\n        }}\n      </Popup>\n      <Popup modal trigger={<button>Import HTML</button>}>\n        {close => {\n          return (\n            <React.Fragment>\n              <Header>\n                <h3>Paste HTML here</h3>\n\n                <PrimaryButton\n                  onClick={() => {\n                    onChange({\n                      value: htmlSerializer.deserialize(importHtml)\n                    });\n                    close();\n                  }}\n                >\n                  Import\n                </PrimaryButton>\n              </Header>\n\n              <PasteArea\n                rows={20}\n                onChange={e => {\n                  const html = e.target.value.replace(/>\\s+</g, \"><\");\n\n                  setImportHtml(html);\n                }}\n              />\n            </React.Fragment>\n          );\n        }}\n      </Popup>\n    </DataToolbarWrapper>\n  );\n};\n\nconst DataToolbarWrapper = styled.div`\n  justify-self: end;\n`;\n\nconst PasteArea = styled.textarea`\n  font-family: ${fontFamilies.MONOSPACE};\n  outline: none;\n  width: calc(100% - 50px);\n  margin: 0 auto;\n  display: block;\n`;\n\nconst Header = styled.div`\n  display: grid;\n  grid-template-columns: auto auto;\n  align-items: center;\n  cursor: pointer;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const SubMark = props => {\n  const { children, attributes } = props;\n  return <Sub {...{ attributes }}>{children}</Sub>;\n};\n\nconst Sub = styled.sub``;\n\nexport const SupMark = props => {\n  const { children, attributes } = props;\n  return <Sup {...{ attributes }}>{children}</Sup>;\n};\n\nconst Sup = styled.sup``;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Editor } from \"slate-react\";\nimport { Value, Block } from \"slate\";\n\nimport { CodeMark, SampMark, VarMark } from \"./marks/CodeMark\";\nimport { codeNodePlugin } from \"./plugins/codePlugin\";\nimport { FormatToolbar } from \"./toolbars/FormatToolBar\";\nimport { BlocksToolbar } from \"./toolbars/BlocksToolbar\";\nimport SoftBreak from \"slate-soft-break\";\nimport DeepTable from \"slate-deep-table\";\nimport { listPlugin } from \"./plugins/listPlugin\";\nimport Viewer, { JsonViewer } from \"./Viewer\";\nimport styled from \"styled-components\";\nimport { alignPlugin } from \"./plugins/alignPlugin\";\nimport { notePlugin } from \"./plugins/notePlugin\";\nimport { DataToolbar } from \"./toolbars/DataToolbar\";\nimport { linkPlugin } from \"./plugins/linkPlugin\";\nimport { pasteHtmlPlugin } from \"./plugins/pasteHtmlPlugin\";\nimport { SubMark, SupMark } from \"./marks/SubSupMark\";\nimport { fontFamilies } from \"./styles/fonts\";\n\nconst schema = {\n  // This section is need for the image upload functionality, if this is not there, then we cannot add anything after an image.\n  document: {\n    normalize: (editor, { code, node, child }) => {\n      switch (code) {\n        case \"last_child_type_invalid\": {\n          const paragraph = Block.create(\"paragraph\");\n          return editor.insertNodeByKey(node.key, node.nodes.size, paragraph);\n        }\n        default:\n          return;\n      }\n    }\n  },\n  blocks: {\n    image: {\n      isVoid: true\n    },\n    hr: {\n      isVoid: true\n    }\n  }\n};\n\nconst plugins = [\n  SoftBreak({ shift: true }),\n  DeepTable(),\n  listPlugin(),\n  notePlugin(),\n  alignPlugin(),\n  codeNodePlugin(),\n  linkPlugin(),\n  pasteHtmlPlugin()\n];\n\nexport const defaultSlateJson = {\n  document: {\n    nodes: [\n      {\n        object: \"block\",\n        type: \"paragraph\",\n        nodes: [\n          {\n            object: \"text\",\n            leaves: [\n              {\n                text: \"\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n};\n\nclass Nirmaan extends Component {\n  // Set the initial value when the app is first constructed.\n\n  state = {\n    value: Value.fromJSON(this.props.defaultValue || defaultSlateJson)\n  };\n\n  // On change, update the app's React state with the new editor value.\n  onChange = ({ value }) => {\n    const json = value.toJSON();\n\n    window.content = json;\n\n    const content = JSON.stringify(json);\n    localStorage.setItem(this.props.id || \"content\", content);\n\n    this.setState({ value });\n    this.props.onChange && this.props.onChange(json);\n  };\n\n  renderMark = (props, editor, next) => {\n    const { attributes, children } = props;\n    switch (props.mark.type) {\n      case \"bold\":\n        return <strong {...attributes}>{children}</strong>;\n      case \"underline\":\n        return <u {...attributes}>{children}</u>;\n      case \"italic\":\n        return <em {...attributes}>{children}</em>;\n      case \"code\":\n        return <CodeMark {...props} {...props.attributes} />;\n      case \"samp\":\n        return <SampMark {...props} {...props.attributes} />;\n      case \"var\":\n        return <VarMark {...props} {...props.attributes} />;\n      case \"sub\":\n        return <SubMark {...props} {...props.attributes} />;\n      case \"sup\":\n        return <SupMark {...props} {...props.attributes} />;\n      default:\n        return next();\n    }\n  };\n\n  onKeyDown = (event, editor, next) => {\n    if (!event.ctrlKey) return next();\n\n    switch (event.key) {\n      case \"`\":\n        event.preventDefault();\n        editor.toggleMark(\"code\");\n        break;\n      case \"q\":\n        event.preventDefault();\n        editor.toggleMark(\"code\");\n        break;\n      case \"b\":\n        event.preventDefault();\n        editor.toggleMark(\"bold\");\n        break;\n      case \"i\":\n        event.preventDefault();\n        editor.toggleMark(\"italic\");\n        break;\n      default:\n        return next();\n    }\n  };\n\n  renderNode = (props, editor, next) => {\n    const { attributes, node, children, isFocused } = props;\n    const align = node.data.get(\"align\");\n    const style = align\n      ? {\n          textAlign: align\n        }\n      : {};\n\n    switch (node.type) {\n      case \"image\":\n        const src = node.data.get(\"src\");\n        return (\n          <img\n            src={src}\n            className={isFocused ? \"selected\" : \"\"}\n            {...attributes}\n          />\n        );\n      case \"heading-1\":\n        return (\n          <h1 {...attributes} style={style}>\n            {children}\n          </h1>\n        );\n      case \"heading-2\":\n        return (\n          <h2 {...attributes} style={style}>\n            {children}\n          </h2>\n        );\n      case \"heading-3\":\n        return (\n          <h3 {...attributes} style={style}>\n            {children}\n          </h3>\n        );\n      case \"paragraph\":\n        return (\n          <p {...attributes} style={style}>\n            {children}\n          </p>\n        );\n      case \"div\":\n        return (\n          <Div {...attributes} style={style} id={node.data.get(\"id\")}>\n            {children}\n          </Div>\n        );\n      case \"hr\":\n        return <hr {...attributes} />;\n      default:\n        return next();\n    }\n  };\n\n  renderEditor = (props, editor, next) => {\n    const children = next();\n    const wordCount = props.value.document\n      .getBlocks()\n      .reduce((memo, b) => memo + b.text.trim().split(/\\s+/).length, 0);\n    return (\n      <div>\n        <div>{children}</div>\n        <WordCounter>Word Count: {wordCount}</WordCounter>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <ToolbarLayout>\n          <FormatToolbar editor={this.editor} onChange={this.onChange} />\n          <DataToolbar editor={this.editor} onChange={this.onChange} />\n        </ToolbarLayout>\n\n        <Layout>\n          <BlocksToolbar editor={this.editor} onChange={this.onChange} />\n          <EditorWrapper>\n            <Editor\n              placeholder=\"Type Something Here\"\n              plugins={plugins}\n              value={this.state.value}\n              onChange={this.onChange}\n              onKeyDown={this.onKeyDown}\n              renderMark={this.renderMark}\n              renderNode={this.renderNode}\n              renderEditor={this.renderEditor}\n              schema={schema}\n              ref={editor => (this.editor = editor)}\n            />\n          </EditorWrapper>\n          <Viewer editor={this.editor} />\n        </Layout>\n      </React.Fragment>\n    );\n  }\n}\n\nconst Div = styled.div`\n  border: 1px dotted red;\n  position: relative;\n  padding: 15px 3px 5px;\n  margin-bottom: 2px;\n  &::after {\n    content: \"${props => props.id}\";\n    position: absolute;\n    top:0;\n    right:0;\n    font-family: ${fontFamilies.MONOSPACE};\n    font-size: 10px;\n  }\n`;\n\nconst EditorWrapper = styled.div`\n  max-height: 100vh;\n  overflow: auto;\n  padding-right: 20px;\n  border: 1px solid #eeeeee;\n`;\n\nconst ToolbarLayout = styled.div`\n  width: 100%;\n  max-width: 1000px;\n  display: grid;\n  top: 0;\n  grid-template-columns: auto auto;\n  grid-column-gap: 50px;\n  background: white;\n`;\n\nconst Layout = styled.div`\n  margin-top: 50px;\n  display: grid;\n\n  grid-column-gap: 40px;\n\n  @media (min-width: 720px) {\n    grid-template-columns: 50px 4fr 3fr;\n  }\n`;\n\nconst WordCounter = styled(\"span\")`\n  margin-top: 10px;\n  padding: 12px;\n  background-color: #ebebeb;\n  display: inline-block;\n`;\n\nexport default Nirmaan;\n","import React from \"react\";\n\nexport const listPlugin = options => {\n  return {\n    commands: {\n      insertUnorderedList: editor => {\n        editor\n          .setBlocks(\"list-item\")\n          .wrapBlock(\"ul-list\")\n          .focus();\n      },\n      insertOrderedList: editor => {\n        editor\n          .setBlocks(\"list-item\")\n          .wrapBlock(\"ol-list\")\n          .focus();\n      },\n      unwrapList: editor => {\n        editor\n          .unwrapBlock(\"ul-list\")\n          .unwrapBlock(\"ol-list\")\n          .focus();\n      }\n    },\n    queries: {\n      isList: editor => {\n        return editor.value.blocks.some(node => node.type === \"list-item\");\n      },\n      isParagraph: editor => {\n        return editor.value.blocks.some(node => node.type === \"paragraph\");\n      },\n      isBlockEmpty: editor => {\n        return editor.value.endText && editor.value.endText.text === \"\";\n      }\n    },\n    renderNode: (props, editor, next) => {\n      const { attributes, node, children } = props;\n      switch (node.type) {\n        case \"ul-list\":\n          return <ul {...attributes}>{children}</ul>;\n        case \"ol-list\":\n          return <ol {...attributes}>{children}</ol>;\n        case \"list-item\":\n          return <li {...attributes}>{children}</li>;\n        default:\n          return next();\n      }\n    },\n    onKeyDown: (event, editor, next) => {\n      if (editor.isList() && editor.isBlockEmpty() && event.keyCode === 13) {\n        event.preventDefault();\n        editor\n          .setBlocks(\"paragraph\")\n          .unwrapList()\n          .focus();\n      } else {\n        return next();\n      }\n    }\n  };\n};\n","import React from \"react\";\nimport { NoteNode } from \"../nodes/NoteNode\";\n\nexport const notePlugin = options => {\n  return {\n    commands: {\n      insertNote: editor => {\n        editor.insertBlock(\"note\").unwrapList();\n      }\n    },\n    renderNode: (props, editor, next) => {\n      const { node } = props;\n      const align = node.data.get(\"align\");\n\n      const style = align\n        ? {\n            textAlign: align\n          }\n        : {};\n\n      switch (node.type) {\n        case \"note\":\n          return <NoteNode {...props} style={style} />;\n        default:\n          return next();\n      }\n    }\n  };\n};\n","import { ALIGN } from \"../consts\";\n\nexport const alignPlugin = options => {\n  return {\n    queries: {\n      getData: editor => {\n        return editor.value.document.nodes.reduce((prev, next) => {\n          return {\n            ...prev,\n            ...next.get(\"data\").toJS()\n          };\n        }, {});\n      }\n    },\n    commands: {\n      alignLeft: editor => {\n        editor.setBlocks({\n          data: {\n            ...editor.getData(),\n            align: ALIGN.LEFT\n          }\n        });\n      },\n      alignCenter: editor => {\n        editor.setBlocks({\n          data: {\n            ...editor.getData(),\n            align: ALIGN.CENTER\n          }\n        });\n      },\n      alignRight: editor => {\n        editor.setBlocks({\n          data: {\n            ...editor.getData(),\n            align: ALIGN.RIGHT\n          }\n        });\n      }\n    }\n  };\n};\n","import React from \"react\";\n\nexport const linkPlugin = options => {\n  return {\n    commands: {\n      wrapLink: (editor, attrs) => {\n        editor.wrapInline({\n          type: \"link\",\n          data: attrs\n        });\n        editor.moveToEnd();\n      },\n      unwrapLink: editor => {\n        editor.unwrapInline(\"link\");\n      }\n    },\n    queries: {\n      hasLinks: editor => {\n        const { value } = editor;\n        return value.inlines.some(inline => inline.type === \"link\");\n      }\n    },\n    renderNode: (props, editor, next) => {\n      const { attributes, node, children } = props;\n      switch (node.type) {\n        case \"link\":\n          const { data } = node;\n          const href = data.get(\"href\");\n          return (\n            <a {...attributes} href={href}>\n              {children}\n            </a>\n          );\n        default:\n          return next();\n      }\n    }\n  };\n};\n","import { getEventTransfer } from \"slate-react\";\nimport htmlSerializer from \"../serializers/HtmlSerializer\";\n\nexport const pasteHtmlPlugin = options => {\n  return {\n    onPaste: (event, editor, next) => {\n      const transfer = getEventTransfer(event);\n      if (transfer.type !== \"html\") return next();\n      console.log(\"I am pasting yo\");\n      const { document } = htmlSerializer.deserialize(transfer.html);\n      editor.insertFragment(document);\n    }\n  };\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Value } from \"slate\";\nimport Nirmaan, { defaultSlateJson } from \"./Nirmaan\";\n\nconst value = {\n  document: {\n    nodes: [\n      {\n        object: \"block\",\n        type: \"paragraph\",\n        nodes: [\n          {\n            object: \"text\",\n            leaves: [\n              {\n                text: \"\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Nirmaan defaultValue={value} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"editor\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}